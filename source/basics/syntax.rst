*******************
Основной синтаксис
*******************

Типы данных
============

.. note::
    Статья в разработке...


Переменные в Python:
--------------------
Переменная в языке программирования это название для зарезервированного места в памяти компьютера,
предназначенное для хранения значений. Это означает, что когда вы создаете переменную, вы на самом деле резервируете
определенное место в памяти компьютера.
Основываясь на типе данных переменной, интерпретатор выделяет необходимое количество памяти и решает, что может
находится в зарезервированной области памяти.
Для понимания, можете думать о переменной как о коробке, в которую можно положить любую вещь, но только определенного
размера. Размер в данном примере будет типом переменной. Это не совсем верное определение, но оно дает общее представление о картине в целом.

**Присвоение значения переменной:**

В Python вам не нужно объявлять тип переменной вручную (как, например в С++). Объявление происходит автоматически
(это называется динамическая типизация), когда вы присваиваете значение переменной. Знак равенства ( = ) используется
для присвоения значения переменной.
Операнд по левую сторону от знака равно ( = ) это имя переменной, операнд по правую сторону - значение присвоенное
этой переменной.


**Таблица - Обзор встроенных типов объектов**

+------------------------------+---------+----------------------------------------------+
|Имя                           |Тип      |        Описание  и пример                    |
+==============================+=========+==============================================+
|Целые Числа                   |   int   | Целые положительные или отрицательные числа  |
|                              |         |      -35, 0, 24, 123467890033373747428       |
+------------------------------+---------+----------------------------------------------+
|Числа с плавающей точкой      |  float  | Дробные числа 3.14, 2.5, -2.33333, 0.12334   |
+------------------------------+---------+----------------------------------------------+
|Строки                        |  str    | Строки "asdf", "Hello world", "123456"       |
+------------------------------+---------+----------------------------------------------+
|Списки                        | list    | последовательность элементов                 |
|                              |         |   ["hello", -123, 0.34, "345"]               |
+------------------------------+---------+----------------------------------------------+
|Словарь                       | dict    |  Последовательность пар элементов содержаших |
|                              |         |  ключь-значение (key-value)                  |
|                              |         |   {"Language": "Python", "Version": "3.8"}   |
+------------------------------+---------+----------------------------------------------+
|Кортеж (Tuple)                |   tup   | Неизменяемая упорядоченная последовательность|
|                              |         | элементов ("hostname", 1234, -0.45, -32)     |
+------------------------------+---------+----------------------------------------------+
|Множество                     | set     | Изменяемая неупоряоченная последовательность |
|                              |         |  элементов {10, "Name", -30, 4.02, 100}      |
+------------------------------+---------+----------------------------------------------+
| Булевые значения             | bool    | Тип данных принимающий одно из двух значений |
|                              |         |      true - истина                           |
|                              |         |      false - ложь                            |
+------------------------------+---------+----------------------------------------------+


Числа
-----
Числа - Это не изменяемый тип данных.
Числа в Python бывают трёх типов: целые, с плавающей точкой и комплексные.
* Примером целого числа может служить 2.
* Примерами чисел с плавающей точкой (или «плавающих» для краткости) могут быть 3.23 и 52.3E-4. Обозначение E показывает степени числа 10. В данном случае 52.3E-4 означает 52.3 · 10−4.
* Примерыкомплексныхчисел:(-5+4j)и(2.3-4.6j)


.. note::
    Нет отдельного типа ‘long int’ (длинное целое). Целые числа по умолчанию могут быть произвольной длины.

Строки
------
Строки - это неизменяемая упорядоченная последовательность символов, заключенная в кавычки.
Строки применяются для записи текстовой информации (кажем, вашего имени) и произвольных совокупностей байтов
(наподобие содержимого файла изображения). Они являются первым примером того, что в Python называется
последовательностью — позиционно упорядоченной коллекцией других объектов. Для содержащихся элементов
последовательности поддерживают порядок слева направо: элементы сохраняются и извлекаются по своим относительным позициям.
Строго говоря, строки представляют собой последовательности односимвольных строк.

Строки можно суммировать. Тогда они объединяются в одну строку, такая операция называется "Конкатенацией строк":

.. code:: python

    firts_string = "asdfgh"
    second_string = "oiuytr"
    print(firts_string + second_string)


.. note::
    В Python 3 нет ASCII-строк, потому что Unicode является надмножеством (включает в себя) ASCII. Если необходимо получить
    строку строго в кодировке ASCII, используйте str.encode("ascii"). По умолчанию все строки в Unicode.

.. warning::
    Нельзя производить арифметтические операции над строкам и числами
    Например:
    "qwerty" + 3
    Это вызовет ошибку, Но строки можно перемножать
    "#" * 10
    выведет на экран строку
    ##########

Операции над последовательностями
---------------------------------
Как последовательности, строки поддерживают операции, которые предполагают наличие позиционного порядка среди
элементов. Например, если мы имеем четырех­ символьную строку, записанную в кавычках (обычно одинарных), то можем
проверить ее длину с помощью встроенной функции **len()** и извлечь ее компоненты посредством выражений индексации.

.. literalinclude:: ../../Examples/String.py
  :language: python

Нумерация всех символов в строке идет с нуля. Но, если нужно обратиться к какому-то по счету символу, начиная с конца,
то можно указывать отрицательные значения (на этот раз с единицы).

.. code:: python

    simple_string = "SringBody"
    simple_string[1]
    # r

    simple_string[-1]
    # y

Кроме обращения к конкретному символу, можно делать срезы строк, указав диапазон номеров (срез выполняется по второе число, не включая его):

.. code:: python

    example_string = "Lorem Ipsum is simply dummy text of the printing and typesetting"
    example_string[0:9]
    # 'Lorem Ips'

    example_string[10:22]
    # 'm is simply '

    # Если не указывается второе число, то срез будет до конца строки:
    example_string[-3:]
    # 'ing'

Также в срезе можно указывать шаг:

.. code:: python

    # Так можно получить нечетные числа
    a = '0123456789'
    a[1::2]
    # '13579'

    # А таким образом можно получить все четные числа строки a:
    a[::2]
    # '02468'

    # Срезы также можно использовать для получения строки в обратном порядке:
    a[::-1]
    # '9876543210'

Методы для работы со строками
-----------------------------
**Методы upper, lower, swapcase, capitalize**

Методы upper(), lower(), swapcase(), capitalize() выполняют преобразование регистра строки:

.. code:: python

    string1 = 'FastEthernet'

    string1.upper()
    #'FASTETHERNET'

    string1.lower()
    #'fastethernet'

    string1.swapcase()
    #'fASTeTHERNET'

    string2 = 'tunnel 0'

    string2.capitalize()
    #'Tunnel 0'

    #Очень важно обращать внимание на то, что часто методы возвращают преобразованную строку. И, значит, надо не забыть присвоить ее какой-то переменной (можно той же).
    string1 = string1.upper()
    print(string1)
    #FASTETHERNET


**Метод count**

Метод count() используется для подсчета того, сколько раз символ или подстрока встречаются в строке:

.. code:: python

    string1 = 'Hello, hello, hello, hello'
    string1.count('hello') # 3
    string1.count('ello') # 4
    string1.count('l') # 8

**Метод find**

Методу find() можно передать подстроку или символ, и он покажет, на какой позиции находится первый символ подстроки (для первого совпадения):

.. code:: python

    string1 = 'interface FastEthernet0/1'
    string1.find('Fast') # 10
    string1[string1.find('Fast')::] # 'FastEthernet0/1'

**Методы startswith, endswith**

Проверка на то, начинается или заканчивается ли строка на определенные символы (методы startswith(), endswith()):

.. code:: python

    string1 = 'FastEthernet0/1'
    string1.startswith('Fast') # True
    string1.startswith('fast') # False
    string1.endswith('0/1') # True
    string1.endswith('0/2') # False

**Метод replace**

Замена последовательности символов в строке на другую последовательность (метод replace()):

.. code:: python

    string1 = 'FastEthernet0/1'
    string1.replace('Fast', 'Gigabit') # 'GigabitEthernet0/1'

**Метод strip**

Часто при обработке файла файл открывается построчно. Но в конце каждой строки, как правило, есть какие-то спецсимволы (а могут быть и в начале). Например, перевод строки.

Для того, чтобы избавиться от них, очень удобно использовать метод strip():

.. code:: python

    string1 = '\n\tinterface FastEthernet0/1\n'
    print(string1)
    #
    #interface FastEthernet0/1
    #

    string1.strip()
    #'interface FastEthernet0/1'


.. note::
    По умолчанию метод strip() убирает пробельные символы. В этот набор символов входят: \t\n\r\f\v

    Методу strip можно передать как аргумент любые символы. Тогда в начале и в конце строки будут удалены все символы, которые были указаны в строке:

    Метод strip() убирает спецсимволы и в начале, и в конце строки. Если необходимо убрать символы только слева или только справа, можно использовать, соответственно, методы lstrip() и rstrip().

**Метод split**

Метод split() разбивает строку на части, используя как разделитель какой-то символ (или символы) и возвращает список строк:

.. code:: python

    string1 = 'switchport trunk allowed vlan 10,20,30,100-200'
    commands = string1.split()
    print(commands) # ['switchport', 'trunk', 'allowed', 'vlan', '10,20,30,100-200']

    #По умолчанию в качестве разделителя используются пробельные символы (пробелы, табы, перевод строки), но в скобках можно указать любой разделитель:
    vlans = commands[-1].split(',')
    print(vlans) #['10', '20', '30', '100-200']

**Метод join**

Метод join() позволяет объеденить список, кортеж или словарь в строку разделяя ее елементы другой строкой.

.. code:: python

    myTuple = ("John", "Peter", "Vicky")
    x = "-".join(myTuple)
    print(x) #John-Peter-Vicky
